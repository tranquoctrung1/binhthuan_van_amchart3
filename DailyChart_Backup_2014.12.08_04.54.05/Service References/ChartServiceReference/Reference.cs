//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace Chart.ChartServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="mySite", Namespace="http://tempuri.org/")]
    public partial class mySite : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string SiteIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string SiteID {
            get {
                return this.SiteIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SiteIDField, value) != true)) {
                    this.SiteIDField = value;
                    this.RaisePropertyChanged("SiteID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoggerDataViewModel", Namespace="http://tempuri.org/")]
    public partial class LoggerDataViewModel : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime TimeStampField;
        
        private System.Nullable<double> FlowRateField;
        
        private System.Nullable<double> PressureField;
        
        private System.Nullable<double> ForwardIndexField;
        
        private System.Nullable<double> ReverseIndexField;
        
        private System.Nullable<double> NetIndexField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime TimeStamp {
            get {
                return this.TimeStampField;
            }
            set {
                if ((this.TimeStampField.Equals(value) != true)) {
                    this.TimeStampField = value;
                    this.RaisePropertyChanged("TimeStamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=1)]
        public System.Nullable<double> FlowRate {
            get {
                return this.FlowRateField;
            }
            set {
                if ((this.FlowRateField.Equals(value) != true)) {
                    this.FlowRateField = value;
                    this.RaisePropertyChanged("FlowRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=2)]
        public System.Nullable<double> Pressure {
            get {
                return this.PressureField;
            }
            set {
                if ((this.PressureField.Equals(value) != true)) {
                    this.PressureField = value;
                    this.RaisePropertyChanged("Pressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=3)]
        public System.Nullable<double> ForwardIndex {
            get {
                return this.ForwardIndexField;
            }
            set {
                if ((this.ForwardIndexField.Equals(value) != true)) {
                    this.ForwardIndexField = value;
                    this.RaisePropertyChanged("ForwardIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=4)]
        public System.Nullable<double> ReverseIndex {
            get {
                return this.ReverseIndexField;
            }
            set {
                if ((this.ReverseIndexField.Equals(value) != true)) {
                    this.ReverseIndexField = value;
                    this.RaisePropertyChanged("ReverseIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=5)]
        public System.Nullable<double> NetIndex {
            get {
                return this.NetIndexField;
            }
            set {
                if ((this.NetIndexField.Equals(value) != true)) {
                    this.NetIndexField = value;
                    this.RaisePropertyChanged("NetIndex");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChartServiceReference.ChartSoap")]
    public interface ChartSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetSite", ReplyAction="*")]
        System.IAsyncResult BeginGetSite(Chart.ChartServiceReference.GetSiteRequest request, System.AsyncCallback callback, object asyncState);
        
        Chart.ChartServiceReference.GetSiteResponse EndGetSite(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetLoggerDataViewModel", ReplyAction="*")]
        System.IAsyncResult BeginGetLoggerDataViewModel(Chart.ChartServiceReference.GetLoggerDataViewModelRequest request, System.AsyncCallback callback, object asyncState);
        
        Chart.ChartServiceReference.GetLoggerDataViewModelResponse EndGetLoggerDataViewModel(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetSiteRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetSite", Namespace="http://tempuri.org/", Order=0)]
        public Chart.ChartServiceReference.GetSiteRequestBody Body;
        
        public GetSiteRequest() {
        }
        
        public GetSiteRequest(Chart.ChartServiceReference.GetSiteRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class GetSiteRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string siteID;
        
        public GetSiteRequestBody() {
        }
        
        public GetSiteRequestBody(string siteID) {
            this.siteID = siteID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetSiteResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetSiteResponse", Namespace="http://tempuri.org/", Order=0)]
        public Chart.ChartServiceReference.GetSiteResponseBody Body;
        
        public GetSiteResponse() {
        }
        
        public GetSiteResponse(Chart.ChartServiceReference.GetSiteResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class GetSiteResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public Chart.ChartServiceReference.mySite GetSiteResult;
        
        public GetSiteResponseBody() {
        }
        
        public GetSiteResponseBody(Chart.ChartServiceReference.mySite GetSiteResult) {
            this.GetSiteResult = GetSiteResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetLoggerDataViewModelRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetLoggerDataViewModel", Namespace="http://tempuri.org/", Order=0)]
        public Chart.ChartServiceReference.GetLoggerDataViewModelRequestBody Body;
        
        public GetLoggerDataViewModelRequest() {
        }
        
        public GetLoggerDataViewModelRequest(Chart.ChartServiceReference.GetLoggerDataViewModelRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class GetLoggerDataViewModelRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string siteID;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public System.DateTime startDate;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public System.DateTime endDate;
        
        public GetLoggerDataViewModelRequestBody() {
        }
        
        public GetLoggerDataViewModelRequestBody(string siteID, System.DateTime startDate, System.DateTime endDate) {
            this.siteID = siteID;
            this.startDate = startDate;
            this.endDate = endDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetLoggerDataViewModelResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetLoggerDataViewModelResponse", Namespace="http://tempuri.org/", Order=0)]
        public Chart.ChartServiceReference.GetLoggerDataViewModelResponseBody Body;
        
        public GetLoggerDataViewModelResponse() {
        }
        
        public GetLoggerDataViewModelResponse(Chart.ChartServiceReference.GetLoggerDataViewModelResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class GetLoggerDataViewModelResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public System.Collections.ObjectModel.ObservableCollection<Chart.ChartServiceReference.LoggerDataViewModel> GetLoggerDataViewModelResult;
        
        public GetLoggerDataViewModelResponseBody() {
        }
        
        public GetLoggerDataViewModelResponseBody(System.Collections.ObjectModel.ObservableCollection<Chart.ChartServiceReference.LoggerDataViewModel> GetLoggerDataViewModelResult) {
            this.GetLoggerDataViewModelResult = GetLoggerDataViewModelResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ChartSoapChannel : Chart.ChartServiceReference.ChartSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Chart.ChartServiceReference.mySite Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Chart.ChartServiceReference.mySite)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLoggerDataViewModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLoggerDataViewModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Chart.ChartServiceReference.LoggerDataViewModel> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Chart.ChartServiceReference.LoggerDataViewModel>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChartSoapClient : System.ServiceModel.ClientBase<Chart.ChartServiceReference.ChartSoap>, Chart.ChartServiceReference.ChartSoap {
        
        private BeginOperationDelegate onBeginGetSiteDelegate;
        
        private EndOperationDelegate onEndGetSiteDelegate;
        
        private System.Threading.SendOrPostCallback onGetSiteCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLoggerDataViewModelDelegate;
        
        private EndOperationDelegate onEndGetLoggerDataViewModelDelegate;
        
        private System.Threading.SendOrPostCallback onGetLoggerDataViewModelCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ChartSoapClient() {
        }
        
        public ChartSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChartSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChartSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChartSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetSiteCompletedEventArgs> GetSiteCompleted;
        
        public event System.EventHandler<GetLoggerDataViewModelCompletedEventArgs> GetLoggerDataViewModelCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Chart.ChartServiceReference.ChartSoap.BeginGetSite(Chart.ChartServiceReference.GetSiteRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSite(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetSite(string siteID, System.AsyncCallback callback, object asyncState) {
            Chart.ChartServiceReference.GetSiteRequest inValue = new Chart.ChartServiceReference.GetSiteRequest();
            inValue.Body = new Chart.ChartServiceReference.GetSiteRequestBody();
            inValue.Body.siteID = siteID;
            return ((Chart.ChartServiceReference.ChartSoap)(this)).BeginGetSite(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Chart.ChartServiceReference.GetSiteResponse Chart.ChartServiceReference.ChartSoap.EndGetSite(System.IAsyncResult result) {
            return base.Channel.EndGetSite(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private Chart.ChartServiceReference.mySite EndGetSite(System.IAsyncResult result) {
            Chart.ChartServiceReference.GetSiteResponse retVal = ((Chart.ChartServiceReference.ChartSoap)(this)).EndGetSite(result);
            return retVal.Body.GetSiteResult;
        }
        
        private System.IAsyncResult OnBeginGetSite(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string siteID = ((string)(inValues[0]));
            return this.BeginGetSite(siteID, callback, asyncState);
        }
        
        private object[] OnEndGetSite(System.IAsyncResult result) {
            Chart.ChartServiceReference.mySite retVal = this.EndGetSite(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSiteCompleted(object state) {
            if ((this.GetSiteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSiteCompleted(this, new GetSiteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSiteAsync(string siteID) {
            this.GetSiteAsync(siteID, null);
        }
        
        public void GetSiteAsync(string siteID, object userState) {
            if ((this.onBeginGetSiteDelegate == null)) {
                this.onBeginGetSiteDelegate = new BeginOperationDelegate(this.OnBeginGetSite);
            }
            if ((this.onEndGetSiteDelegate == null)) {
                this.onEndGetSiteDelegate = new EndOperationDelegate(this.OnEndGetSite);
            }
            if ((this.onGetSiteCompletedDelegate == null)) {
                this.onGetSiteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSiteCompleted);
            }
            base.InvokeAsync(this.onBeginGetSiteDelegate, new object[] {
                        siteID}, this.onEndGetSiteDelegate, this.onGetSiteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Chart.ChartServiceReference.ChartSoap.BeginGetLoggerDataViewModel(Chart.ChartServiceReference.GetLoggerDataViewModelRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLoggerDataViewModel(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetLoggerDataViewModel(string siteID, System.DateTime startDate, System.DateTime endDate, System.AsyncCallback callback, object asyncState) {
            Chart.ChartServiceReference.GetLoggerDataViewModelRequest inValue = new Chart.ChartServiceReference.GetLoggerDataViewModelRequest();
            inValue.Body = new Chart.ChartServiceReference.GetLoggerDataViewModelRequestBody();
            inValue.Body.siteID = siteID;
            inValue.Body.startDate = startDate;
            inValue.Body.endDate = endDate;
            return ((Chart.ChartServiceReference.ChartSoap)(this)).BeginGetLoggerDataViewModel(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Chart.ChartServiceReference.GetLoggerDataViewModelResponse Chart.ChartServiceReference.ChartSoap.EndGetLoggerDataViewModel(System.IAsyncResult result) {
            return base.Channel.EndGetLoggerDataViewModel(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.Collections.ObjectModel.ObservableCollection<Chart.ChartServiceReference.LoggerDataViewModel> EndGetLoggerDataViewModel(System.IAsyncResult result) {
            Chart.ChartServiceReference.GetLoggerDataViewModelResponse retVal = ((Chart.ChartServiceReference.ChartSoap)(this)).EndGetLoggerDataViewModel(result);
            return retVal.Body.GetLoggerDataViewModelResult;
        }
        
        private System.IAsyncResult OnBeginGetLoggerDataViewModel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string siteID = ((string)(inValues[0]));
            System.DateTime startDate = ((System.DateTime)(inValues[1]));
            System.DateTime endDate = ((System.DateTime)(inValues[2]));
            return this.BeginGetLoggerDataViewModel(siteID, startDate, endDate, callback, asyncState);
        }
        
        private object[] OnEndGetLoggerDataViewModel(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Chart.ChartServiceReference.LoggerDataViewModel> retVal = this.EndGetLoggerDataViewModel(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLoggerDataViewModelCompleted(object state) {
            if ((this.GetLoggerDataViewModelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLoggerDataViewModelCompleted(this, new GetLoggerDataViewModelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLoggerDataViewModelAsync(string siteID, System.DateTime startDate, System.DateTime endDate) {
            this.GetLoggerDataViewModelAsync(siteID, startDate, endDate, null);
        }
        
        public void GetLoggerDataViewModelAsync(string siteID, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.onBeginGetLoggerDataViewModelDelegate == null)) {
                this.onBeginGetLoggerDataViewModelDelegate = new BeginOperationDelegate(this.OnBeginGetLoggerDataViewModel);
            }
            if ((this.onEndGetLoggerDataViewModelDelegate == null)) {
                this.onEndGetLoggerDataViewModelDelegate = new EndOperationDelegate(this.OnEndGetLoggerDataViewModel);
            }
            if ((this.onGetLoggerDataViewModelCompletedDelegate == null)) {
                this.onGetLoggerDataViewModelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLoggerDataViewModelCompleted);
            }
            base.InvokeAsync(this.onBeginGetLoggerDataViewModelDelegate, new object[] {
                        siteID,
                        startDate,
                        endDate}, this.onEndGetLoggerDataViewModelDelegate, this.onGetLoggerDataViewModelCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Chart.ChartServiceReference.ChartSoap CreateChannel() {
            return new ChartSoapClientChannel(this);
        }
        
        private class ChartSoapClientChannel : ChannelBase<Chart.ChartServiceReference.ChartSoap>, Chart.ChartServiceReference.ChartSoap {
            
            public ChartSoapClientChannel(System.ServiceModel.ClientBase<Chart.ChartServiceReference.ChartSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetSite(Chart.ChartServiceReference.GetSiteRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetSite", _args, callback, asyncState);
                return _result;
            }
            
            public Chart.ChartServiceReference.GetSiteResponse EndGetSite(System.IAsyncResult result) {
                object[] _args = new object[0];
                Chart.ChartServiceReference.GetSiteResponse _result = ((Chart.ChartServiceReference.GetSiteResponse)(base.EndInvoke("GetSite", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLoggerDataViewModel(Chart.ChartServiceReference.GetLoggerDataViewModelRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetLoggerDataViewModel", _args, callback, asyncState);
                return _result;
            }
            
            public Chart.ChartServiceReference.GetLoggerDataViewModelResponse EndGetLoggerDataViewModel(System.IAsyncResult result) {
                object[] _args = new object[0];
                Chart.ChartServiceReference.GetLoggerDataViewModelResponse _result = ((Chart.ChartServiceReference.GetLoggerDataViewModelResponse)(base.EndInvoke("GetLoggerDataViewModel", _args, result)));
                return _result;
            }
        }
    }
}
